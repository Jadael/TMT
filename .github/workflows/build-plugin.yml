name: Build VCV Rack Plugin
on: [push, pull_request]

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

permissions:
  contents: write

jobs:
  modify-plugin-version:
    name: Modify plugin version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - run: |
          gitrev=`git rev-parse --short HEAD`
          pluginversion=`jq -r '.version' plugin.json`
          echo "Set plugin version from $pluginversion to $pluginversion-$gitrev"
          cat <<< `jq --arg VERSION "$pluginversion-$gitrev" '.version=$VERSION' plugin.json` > plugin.json
        if: "! startsWith(github.ref, 'refs/tags/v')"

  build:
    name: ${{ matrix.platform }}
    needs: modify-plugin-version
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/qno/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      matrix:
        platform: [win-x64, lin-x64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          make plugin-build-${{ matrix.platform }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: ${{ matrix.platform }}

  build-mac:
    name: mac
    needs: modify-plugin-version
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64, arm64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.platform }}.zip
          unzip Rack-SDK.zip
      - name: Build plugin
        run: |
          CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin
          CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}
          make dep
          make dist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-${{ matrix.platform }}

  prepare-tags:
    name: Prepare Tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check and Create Tag
        run: |
          pluginversion=`jq -r '.version' plugin.json`
          tag_exists=$(git tag -l "v$pluginversion")
          if [ -z "$tag_exists" ]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag "v$pluginversion"
            git push origin "v$pluginversion"
          fi

  publish:
    name: Publish plugin
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [build, build-mac, prepare-tags]
    steps:
      - uses: actions/checkout@v3
      - name: Check if plugin version matches tag
        run: |
          pluginversion=`jq -r '.version' plugin.json`
          if [ "v$pluginversion" != "${{ env.CI_REF_NAME }}" ]; then
            echo "Plugin version from plugin.json 'v$pluginversion' doesn't match with tag version '${{ env.CI_REF_NAME }}'"
            exit 1
          fi
      - uses: actions/download-artifact@v3
        with:
          path: _artifacts
      - name: Delete old release if exists
        uses: dev-drprasad/delete-older-releases@v0.1.0
        with:
          keep_latest: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ env.CI_REF_NAME }}
          body: |
            ${{ env.CI_REPOSITORY_NAME }} VCV Rack Plugin ${{ env.CI_REF_NAME }}
          draft: false
          prerelease: false
          files: _artifacts/**/*.vcvplugin
          file_glob: true

  publish-nightly:
    name: Publish nightly
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, build-mac, prepare-tags]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          path: _artifacts

      - name: Get latest release info
        id: get_release
        uses: InsonusK/get-latest-release@v1.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}
          tag: Nightly

      - name: Delete old release if exists
        if: steps.get_release.outputs.tag_name != ''
        uses: dev-drprasad/delete-older-releases@v0.1.0
        with:
          keep_latest: 1
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: Nightly

      - name: Create or update nightly release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: Nightly
          name: Nightly Build
          body: Nightly build of ${{ env.CI_REPOSITORY_NAME }}
          draft: false
          prerelease: true
          files: _artifacts/**/*.vcvplugin
          file_glob: true
          allow_updates: true  # Allows updating the release if it already exists without failing