name: Build VCV Rack Plugin
on: [push, pull_request]

env:
  rack-sdk-version: latest
  rack-plugin-toolchain-dir: /home/build/rack-plugin-toolchain

defaults:
  run:
    shell: bash

permissions:
  contents: write
  issues: write

jobs:
  modify-plugin-version:
    name: Modify plugin version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - run: |
          gitrev=`git rev-parse --short HEAD`
          pluginversion=`jq -r '.version' plugin.json`
          echo "Set plugin version from $pluginversion to $pluginversion-$gitrev"
          cat <<< `jq --arg VERSION "$pluginversion-$gitrev" '.version=$VERSION' plugin.json` > plugin.json
        if: "! startsWith(github.ref, 'refs/tags/v')"

  build:
    name: ${{ matrix.platform }}
    needs: modify-plugin-version
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/qno/rack-plugin-toolchain-win-linux
      options: --user root
    strategy:
      matrix:
        platform: [win-x64, lin-x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - name: Build plugin
        run: |
          export PLUGIN_DIR=$GITHUB_WORKSPACE
          pushd ${{ env.rack-plugin-toolchain-dir }}
          make plugin-build-${{ matrix.platform }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ env.rack-plugin-toolchain-dir }}/plugin-build
          name: ${{ matrix.platform }}

  build-mac:
    name: mac
    needs: modify-plugin-version
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        id: plugin-version-cache
        with:
          path: plugin.json
          key: ${{ github.sha }}-${{ github.run_id }}
      - name: Get Rack-SDK
        run: |
          pushd $HOME
          wget -O Rack-SDK.zip https://vcvrack.com/downloads/Rack-SDK-${{ env.rack-sdk-version }}-mac-${{ matrix.platform }}.zip
          unzip Rack-SDK.zip
      - name: Build plugin
        run: |
          CROSS_COMPILE_TARGET_x64=x86_64-apple-darwin
          CROSS_COMPILE_TARGET_arm64=arm64-apple-darwin
          export RACK_DIR=$HOME/Rack-SDK
          export CROSS_COMPILE=$CROSS_COMPILE_TARGET_${{ matrix.platform }}
          make dep
          make dist
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: dist/*.vcvplugin
          name: mac-${{ matrix.platform }}

publish:
  name: Publish plugin
  runs-on: ubuntu-latest
  needs: [build, build-mac]
  # Trigger this job only on pushes to the main branch.
  if: github.ref == 'refs/heads/main'
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches

    - name: Setup jq
      run: sudo apt-get install jq

    - name: Check if new version is tagged
      id: check-version
      run: |
        pluginversion=`jq -r '.version' plugin.json`
        echo "Plugin version: $pluginversion"
        git fetch --tags
        if git rev-parse "v$pluginversion" >/dev/null 2>&1; then
          echo "::set-output name=tag_exists::true"
          echo "Tag v$pluginversion already exists"
        else
          echo "::set-output name=tag_exists::false"
          echo "No existing tag for version v$pluginversion, proceeding to create one"
    
    - name: Create tag
      if: steps.check-version.outputs.tag_exists == 'false'
      run: |
        pluginversion=`jq -r '.version' plugin.json`
        git tag -a "v$pluginversion" -m "Release version v$pluginversion"
        git push origin "v$pluginversion"
    
    - name: Create Release
      if: steps.check-version.outputs.tag_exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ${{ env.GITHUB_REPOSITORY_NAME }} VCV Rack Plugin ${{ github.ref }}
        draft: false
        prerelease: false

    - uses: actions/download-artifact@v2
      if: steps.check-version.outputs.tag_exists == 'false'
      with:
        path: _artifacts

    - name: Upload release assets
      if: steps.check-version.outputs.tag_exists == 'false'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: _artifacts/**/*.vcvplugin
        tag: ${{ github.ref }}
        file_glob: true